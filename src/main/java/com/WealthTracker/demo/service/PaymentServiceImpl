package com.WealthTracker.demo.service.payment.impl;

import com.WealthTracker.demo.DTO.payment.PaymentRequestDTO;
import com.WealthTracker.demo.DTO.payment.PaymentResponseDTO;
import com.WealthTracker.demo.domain.Payment;
import com.WealthTracker.demo.domain.User;
import com.WealthTracker.demo.error.CustomException;
import com.WealthTracker.demo.repository.PaymentRepository;
import com.WealthTracker.demo.repository.UserRepository;
import com.WealthTracker.demo.service.payment.PaymentService;
import com.WealthTracker.demo.util.JwtUtil;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
@Transactional(readOnly=true)
@RequireArgsConstructor
public class PaymentServiceImpl implements PaymentService {
    private final PaymentRepository paymentRepository;
    private final UserRepository userRepository;
    private final JwtUtil jwtUtil;

    @Override
    @Transactional
    public Long writePayment(PaymentRequestDTO paymentRequestDTO, String token) {
        // 토큰 검증
        if(!jwtUtil.validationToken(token)) {
            return -1L;
        }
        // 사용자 정보 가져오기
        Optional<User> user = userRepository.findByUserId(jwtUtil.getUserId(token));
                List<Payment> paymentList = paymentRepository.findAllByUser(user.orElseThrow(
                        ()->new CustomException(ErrorCode.USER_NOT_FOUND)
                ));
       // 결제 내역 생성
       Payment payment = Payment.builder()
            .dueDate(paymentRequestDTO.getDueDate())
            .paymentDetail(paymentRequestDTO.getDueDate())
            .lastPayment(paymentRequestDTO.getLastPayment())
            .cost(paymentRequestDTO.getCost())
            .user(userRepository.findByUserId(jwtUtil.getUserId(token)).orElseThrow(
                                    ()->new CustomException(ErrorCode.USER_NOT_FOUND)))
            .tradeName(paymentRequestDTO.getTradeName())
            .build();
       // 결제 내역 저장
       Payment savePayment = paymentRepository.save(payment);
       // 저장된 결제 내역 ID 반환
       return savePayment.getPaymentId();
    }
    @Override
    public List<PaymentResponseDTO> listPayments(String token) {
        Optional<User> user = userRepository.findByUserId(jwtUtil.getUserId(token));
                        List<Payment> paymentList = paymentRepository.findAllByUser(user.orElseThrow(
                                ()->new CustomException(ErrorCode.USER_NOT_FOUND)
                        ));
        // 결제 내역 조회
        List<Payment> paymentList = paymentRepository.findAllByUser(user);

        return paymentList.stream()
            .map(payment -> PaymentResponseDTO.builder()
                .paymentId(payment.getPaymentId())
                .dueDate(payment.getDueDate())
                .paymentDetail(payment.getPaymentDetail())
                .lastPayment(payment.getLastPayment())
                .cost(payment.getCost())
                .build())
            .collect(Collectors.toList());
    }
}